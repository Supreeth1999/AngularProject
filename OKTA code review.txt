We had 2 different of types Ping Identity provider implementtaion in our applications.


1. PingFederate: This IdP was authenticating users and generating security tokens (e.g., SAML, OAuth)
 that can be used by applications to establish user identity and grant access.

2. Ping Agent applications: PingAccess Agent deployed on a web server might intercept incoming requests and redirect users for authentication.
Ping Agent is a component that interacts with applications and the Ping Identity platform to enforce policies and manage authentication.

Agents are often used to integrate legacy or third-party applications with Ping Identity services. 

They help extend modern identity capabilities, like OAuth or SAML-based SSO, to applications that do not inherently support these standards.
Example: OCC,FNA,Open Admin

1. Analysis how occ security part was working?

a.Admin pattern pages: OCC admin page, DMOfferAdmin Page- BasicAuthenticationFilter
b.Secure pages: FNA->OCC, ACE->OCC.:cleartrust filter: intercept request look for principal request header(CT_REMOTE_USER)->EMP ID->LDAP(retrieve info)

one common custom filter: Oauthidentityiler

To achieve okta authentication we should follow 4 steps:
1. generation of authorization uri
2. Authcode exchange
3. Token validation
4. fetch Userinfo



================================================================================================
Process:

Extract Credentials: The filter checks the Authorization header for the Basic keyword, followed by the base64-encoded username and password.
Decode Credentials: If the header is present, the filter decodes the base64 string to retrieve the username and password.
Authentication: The filter then creates a UsernamePasswordAuthenticationToken with the extracted credentials and passes it to the AuthenticationManager.
AuthenticationManager: The AuthenticationManager (usually using a UserDetailsService) attempts to authenticate the user by verifying the credentials against the user store (e.g., database, in-memory, LDAP).
Authentication Success: If authentication is successful, the filter sets the Authentication object in the SecurityContext, which allows subsequent filters and application code to recognize the authenticated user.
Authentication Failure: If authentication fails (e.g., incorrect credentials), the filter responds with a 401 Unauthorized status.

The PRE_AUTH_FILTER refers to the AbstractPreAuthenticatedProcessingFilter or one of its concrete subclasses in Spring Security.
This filter is part of the pre-authentication mechanism, where the authentication process is externalized to another system, such as a proxy,
an external authentication service, or a custom filter.
Spring Security then uses the provided authentication information to authorize access without re-authenticating the user.





=============================================================================
Action plans:

As we are not informed there was achnage ticket palnned "" and Level 2 should open bridge for any on call support issue.


1. As we see any issue with productions jvms not being in proper status(up/ down) along 
with notifying level1 team please start a call and try to figure out what is going wrong.
2. Check splunk/Rassa/putty logs and report it.
3. If issue didn't resolve for long run follow below steps to open NOC bridge.

4. Please keep application specific information(Ex: CMDB ID, hosted server details,ip details,logs monitor link,codebase etc.) handy which will help us during bridge.
5.Lets be proactive identifying what change ticket palnned and which functionality will be impacted.




Subject: Summary of On-call Issue - Ozone Application (Date)

Hi Team,

Below is the summary of the on-call issue that occurred yesterday with the Ozone application:
Ther was firwall changes

Action Plans:
Proactive Monitoring:

Ensure any issues with production JVMs not being in proper status (up/down) are promptly addressed.
In addition to notifying the Level 1 team, immediately start a call to investigate the root cause.
Log Analysis:

Check Splunk, Rassa, and Putty logs, and report your findings.
Escalation Process:

If the issue remains unresolved for an extended period, follow the steps below to open a NOC bridge.
Preparedness:

Keep application-specific information (e.g., CMDB ID, hosted server details, IP details, log monitoring links, codebase, etc.) readily available to assist during the bridge call.
Change Management:

Proactively identify any planned change tickets and assess which functionalities may be impacted.
