Hi Rajeev,

The Current OCC application okta migartion code only gets admin entitlements from okta
and doesn't depends on g.et.rtl.occ.* entitlements (g.et.rtl.occ.retail,g.et.rtl.occ.rds,g.et.rtl.occ.crdcntr,g.et.rtl.occ.pvt) from Okta.

As we discussed, In part-1 of OCC okta migration we are just using employee ID and not g.et.rtl.occ.* entiltments from okta.
That Employee ID passed to LDAP to retrieve et.rtl.occ.* entitlements and occ code supports that and has et.rtl.occ.* reference.

screenshot:


As part of optimization, We discussed that ED is the source for these entitlements,
LDAP and okta are two agents which were fetching data drom same source, let's eliminate LDAP dependency and move to okta to get the all entitlements.
When we discussed this with okta team we got to know that et.rt.occ.* can't be imported we need to have g.* groups, on that note we created g.et.rtl.occ.* groups in non pros and mirroerd the user and started POC.
As the LOE of complete elimination of LDAP was high, we planned to give in next release.

1.For Cookies and Cream release we have given part-1 of OCC Okta and OCC code didn't depend on "g.et.rtl.occ.*" entitlements we didn't place mirroring request.
2.When non prod mirroring request completed we have observed that existing entitlement et.rtl.occ.* impacted as shown below, So to not to disturb existing prod entitlemts we have not submitted mirror request.


What was cause for prod "user not assigned to application error".

1.All the user of OCC should be imported in Okta.

Data: Non prod testing without new groups.(date of g. mirroring request)
One user without g. entitements.



package com.sample;

import java.util.*;

public class Sample {

		public static void main(String[] args) {
			// TODO Auto-generated method stub
	/*		Set<String> directorygroups = new HashSet<String>();
			directorygroups.add("g.occAdmin");
			directorygroups.add("g.occDMOfferAdmin");
			directorygroups.add("g.et.rtl.occ.retail");
			directorygroups.add("g.et.rtl.occ.rds");
			directorygroups.add("g.et.rtl.occ.pvt");
			directorygroups.add("g.et.rtl.occ.crdcntr");

			System.out.println("directory group values: " + directorygroups);
			
			Set<String> adminroles = new HashSet<String>();
			adminroles.add("g.occAdmin");*/
			

			        // Initial set of directory groups
			        Set<String> directoryGroups = new HashSet<>();
			        directoryGroups.add("g.occadmin");
			        directoryGroups.add("ocADMIN");
			        directoryGroups.add("g.et.rtl.occ.retail");
			        directoryGroups.add("g.occDMOfferAdmin");
			        directoryGroups.add("g.et.rtl.occ.pvt");
			        directoryGroups.add("g.et.rtl.occ.crdcntr");
			        directoryGroups.add("g.et.rtl.occ.rds");

			        // Sets to hold admin and non-admin roles
			        Set<String> adminRoles = new HashSet<>();
			        Set<String> nonAdminRoles = new HashSet<>();

			        // Separate admin and non-admin roles
			        for (String group : directoryGroups) {
			            if (isAdminRole(group)) {
			                adminRoles.add(group);
			            } else {
			                nonAdminRoles.add(group);
			            }
			        }

			        // Print out the sets
			        System.out.println("Admin Roles: " + adminRoles);
			        System.out.println("Non-Admin Roles: " + nonAdminRoles);
			    }

			    // Helper function to determine if the role is an admin role
			    private static boolean isAdminRole(String group) {
			        return group.toLowerCase().contains("admin");
			    }
			

			

			
			

		
	}


